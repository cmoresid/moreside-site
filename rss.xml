<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>A Developer's Musings - All posts</title>
        <link>http://moresi.de</link>
        <description><![CDATA[Personal blog for Connor Moreside]]></description>
        <atom:link href="http://moresi.de/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sun, 26 Feb 2017 00:00:00 UT</lastBuildDate>
        <item>
    <title>Creating A Drag-n-Drop Enabled Text Box in WPF</title>
    <link>http://moresi.de/posts/2017-02-26-drag-n-drop-text-field-wpf.html</link>
    <description><![CDATA[<p>Recently, a WPF desktop application that I was working on required the user to select multiple files, which were typically in different directories. I had implemented a “Browse” button that would allow the user to select these files via a file selection dialog box . However, this becomes very tedious when you are constantly selecting these different files. I decided to implement drag-n-drop to make my users’ lives easier.</p>
<p>There are a few different approaches that you can take. You can use a framework, such as the wonderful “GongSolutions.WPF.DragDrop” library. This library is great if you require more advanced drag-n-drop functionality. I was originally using this library to implement the functionality that I needed, but later realized it was overkill. I decided to go with a different approach. I decided to create a custom control that derived from the <code>TextBox</code> control.</p>
<p>First, you will need to override the <code>OnApplyTemplate</code> method of the <code>TextBox</code> control. <code>OnApplyTemplate</code> is called just before the UI element is displayed in the application. This is a good place to wire the drag/drop related events:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs"><span class="kw">public</span> <span class="kw">override</span> <span class="dt">void</span> <span class="fu">OnApplyTemplate</span>()
{
    <span class="co">// Make sure to call the base.OnApplyTemplate() first!</span>
    <span class="kw">base</span>.<span class="fu">OnApplyTemplate</span>();

    DragEnter += FilePathTextBox_DragEnter;
    Drop += FilePathTextBox_Drop;
    PreviewDragOver += FilePathTextBox_PreviewDragOver;
}</code></pre></div>
<p>We will now start implementing the event handlers that we specified in the <code>OnApplyTemplate</code> method. Let’s start with the easy one first: <code>FilePathTextBox_PreviewDragOver</code>. This handler tells the control to show the user the little ‘+’ sign when he / she drags a file onto the text box:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs"><span class="kw">private</span> <span class="dt">void</span> <span class="fu">FilePathTextBox_PreviewDragOver</span>(<span class="dt">object</span> sender, DragEventArgs e)
{
    e.<span class="fu">Handled</span> = <span class="kw">true</span>;
}</code></pre></div>
<p>Now, let’s write the event handler that handles the event when the user drags a file on to the custom text box:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs"><span class="kw">private</span> <span class="dt">void</span> <span class="fu">FilePathTextBox_DragEnter</span>(<span class="dt">object</span> sender, DragEventArgs e)
{
    var dragFileList = ((DataObject)e.<span class="fu">Data</span>).<span class="fu">GetFileDropList</span>().<span class="fu">Cast</span>&lt;<span class="dt">string</span>&gt;().<span class="fu">ToList</span>();
    <span class="dt">var</span> draggingOnlyOneFile = dragFileList.<span class="fu">Count</span> == <span class="dv">1</span> &amp;&amp; dragFileList.<span class="fu">All</span>(item =&gt;
    {
        <span class="dt">var</span> attributes = File.<span class="fu">GetAttributes</span>(item);
        <span class="kw">return</span> (attributes &amp; FileAttributes.<span class="fu">Directory</span>) != FileAttributes.<span class="fu">Directory</span>;
    });

    e.<span class="fu">Effects</span> = draggingOnlyOneFile ? DragDropEffects.<span class="fu">Copy</span> : DragDropEffects.<span class="fu">None</span>;
}</code></pre></div>
<p>The <code>FilePathTextBox_DragEnter</code> event handler gets a list of files that the user dragged on to the text box. In the code above, we want the user to only be able to drag 1 file (not directory) on to the text box. This filtering can be tailored to your needs. This is left as an exercise to the reader.</p>
<p>Here is the last event that we need to implement:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs"><span class="kw">private</span> <span class="dt">void</span> <span class="fu">FilePathTextBox_Drop</span>(<span class="dt">object</span> sender, DragEventArgs e)
{
    var dragFileList = ((DataObject)e.<span class="fu">Data</span>).<span class="fu">GetFileDropList</span>().<span class="fu">Cast</span>&lt;<span class="dt">string</span>&gt;().<span class="fu">ToList</span>();
    <span class="dt">var</span> draggingOnlyOneFile = dragFileList.<span class="fu">Count</span> == <span class="dv">1</span> &amp;&amp; dragFileList.<span class="fu">All</span>(item =&gt;
    {
        <span class="dt">var</span> attributes = File.<span class="fu">GetAttributes</span>(item);
        <span class="kw">return</span> (attributes &amp; FileAttributes.<span class="fu">Directory</span>) != FileAttributes.<span class="fu">Directory</span>;
    });

    e.<span class="fu">Effects</span> = draggingOnlyOneFile ? DragDropEffects.<span class="fu">Copy</span> : DragDropEffects.<span class="fu">None</span>;

    <span class="co">// Set the Text property of the custom text box to the path of</span>
    <span class="co">// the file the user dropped.</span>
    <span class="kw">if</span> (draggingOnlyOneFile)
        Text = dragFileList[<span class="dv">0</span>];
}</code></pre></div>
<p>Here is the final, refactored implementation:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs"><span class="kw">public</span> <span class="kw">class</span> FilePathTextBox : TextBox
{
    <span class="kw">public</span> <span class="kw">override</span> <span class="dt">void</span> <span class="fu">OnApplyTemplate</span>()
    {
        <span class="kw">base</span>.<span class="fu">OnApplyTemplate</span>();
        DragEnter += FilePathTextBox_DragEnter;
        Drop += FilePathTextBox_Drop;
        PreviewDragOver += FilePathTextBox_PreviewDragOver;
    }

    <span class="kw">private</span> <span class="dt">void</span> <span class="fu">FilePathTextBox_PreviewDragOver</span>(<span class="dt">object</span> sender, DragEventArgs e)
    {
        e.<span class="fu">Handled</span> = <span class="kw">true</span>;
    }

    <span class="kw">private</span> <span class="dt">void</span> <span class="fu">FilePathTextBox_DragEnter</span>(<span class="dt">object</span> sender, DragEventArgs e)
    {
        <span class="dt">var</span> didUserOnlyDragOneFile = <span class="fu">DidUserDragOnlyOneFile</span>(e);
        <span class="fu">SetDragDropEffect</span>(didUserOnlyDragOneFile, e);
    }

    <span class="kw">private</span> <span class="dt">void</span> <span class="fu">FilePathTextBox_Drop</span>(<span class="dt">object</span> sender, DragEventArgs e)
    {
        <span class="dt">var</span> didUserOnlyDragOneFile = <span class="fu">DidUserDragOnlyOneFile</span>(e);
        <span class="fu">SetDragDropEffect</span>(didUserOnlyDragOneFile, e);

        <span class="kw">if</span> (draggingOnlyOneFile)
            Text = dragFileList[<span class="dv">0</span>];
    }

    <span class="kw">private</span> <span class="dt">bool</span> <span class="fu">DidUserDragOnlyOneFile</span>(DragEventArgs e)
    {
        var dragFileList = ((DataObject)e.<span class="fu">Data</span>).<span class="fu">GetFileDropList</span>().<span class="fu">Cast</span>&lt;<span class="dt">string</span>&gt;().<span class="fu">ToList</span>();
        <span class="dt">var</span> draggingOnlyOneFile = dragFileList.<span class="fu">Count</span> == <span class="dv">1</span> &amp;&amp; dragFileList.<span class="fu">All</span>(item =&gt;
        {
            <span class="dt">var</span> attributes = File.<span class="fu">GetAttributes</span>(item);
            <span class="kw">return</span> (attributes &amp; FileAttributes.<span class="fu">Directory</span>) != FileAttributes.<span class="fu">Directory</span>;
        });

        <span class="kw">return</span> draggingOnlyOneFile;
    }

    <span class="kw">private</span> <span class="dt">void</span> <span class="fu">SetDragDropEffect</span>(<span class="dt">bool</span> shouldShowCopyEffect, DragEventArgs e)
    {
        e.<span class="fu">Effects</span> = shouldShowCopyEffect ? DragDropEffects.<span class="fu">Copy</span> : DragDropEffects.<span class="fu">None</span>;
    }
}</code></pre></div>
<p>Cheers,</p>
<p>Connor Moreside</p>]]></description>
    <pubDate>Sun, 26 Feb 2017 00:00:00 UT</pubDate>
    <guid>http://moresi.de/posts/2017-02-26-drag-n-drop-text-field-wpf.html</guid>
    <dc:creator>Connor Moreside</dc:creator>
</item>
<item>
    <title>Setting Up R Studio Server On Microsoft Azure</title>
    <link>http://moresi.de/posts/2016-04-02-setting-up-r-studio-server-on-microsoft-azure.html</link>
    <description><![CDATA[<h2 id="overview">Overview</h2>
<p>This article will discuss why you would want to setup R Studio Server and how to perform the installation of R Studio Server on a Microsoft Azure VM:</p>
<ol style="list-style-type: decimal">
<li>Introduction<br />
</li>
<li>Creating a Virtual Machine in Microsoft Azure<br />
</li>
<li>Installing R<br />
</li>
<li>Installing R Studio Server</li>
</ol>
<p>This article assumes that you already have a Microsoft Azure subscription. If not, you can sign up for a <a href="https://azure.microsoft.com/en-us/free/">trial</a> so you can follow along.</p>
<h2 id="introduction">Introduction</h2>
<p>R is a powerful language for performing data analysis. There are many different tools that allow one to create and execute R scripts. You can write R programs directly in the R console, or you can use a more full featured tool such as <a href="https://www.rstudio.com/">R Studio</a> or the newly released <a href="https://www.visualstudio.com/en-us/features/rtvs-vs.aspx">R Tools for Visual Studio</a>.</p>
<p>R Studio is a fantastic IDE for developing R scripts. It allows you to manage your R scripts, install packages, view visualizations, and much, much more. R Studio Server is essentially the R Studio IDE in the cloud. It allows you to access your data analysis environment from any desktop computer, tablet, or phone!</p>
<p>However, the greatest advantage of using R Studio Server is having the ability to install it on a powerful VM where you can perform much more memory and CPU intense analyses without fear of bogging down your local system.</p>
<p>One of the disadvantages of installing on an Azure VM is cost. Depending on the size of the VM you pick, it can become quite costly. One way to mitigate cost is to turn off the VM when you are not using it. You will not be charged when the VM is shutdown.</p>
<p>Still sound like a good idea? Awesome! Let’s begin!</p>
<h2 id="create-virtual-machine">Create Virtual Machine</h2>
<p>Begin by logging into the Microsoft Azure portal. In the left-side bar, click the Virtual Machines link:</p>
<div class="figure">
<img src="/images/2016-04-02-VMCreationScreen.png" alt="VM Creation Screen #1" />
<p class="caption">VM Creation Screen #1</p>
</div>
<p>Click the Add button to create a new VM. From here, you can select what VM image to use. We will be utilizing the “Ubuntu Server 14.04 LTS” image. Start typing “Ubuntu” into the search bar at the top. You should see the aforementioned image in the search results. Select this image to continue.</p>
<div class="figure">
<img src="/images/2016-04-02-CreateVM.png" alt="VM Creation Screen #2" />
<p class="caption">VM Creation Screen #2</p>
</div>
<p>You will now be prompted to select a deployment model. We will just use the default. Click the “Create” button.</p>
<div class="figure">
<img src="/images/2016-04-02-ResourceManager.png" alt="VM Creation Screen #2" />
<p class="caption">VM Creation Screen #2</p>
</div>
<p>It is now time to configure the VM. First, have to provide a name for the VM. I chose RStudio. You can pick any name that suits your fancy. Now, you will need to specify a user name. Enter “rstudioadmin”. There are two different authentication mechanisms you can use. The simplest is just using a plain old password. Alternatively, you can opt into using an SSH key to access your VM. In this article, we will just use a password. If you want to use an SSH key, you can click the SSH tab and copy and paste your public key into the text area.</p>
<p>Select the subscription to associate the VM. Now choose which resource group to associate this VM with. We will create a new resource group for this VM. Enter “RServer” as the name of the resource group. Now choose the location where the VM will be located.</p>
<div class="figure">
<img src="/images/2016-04-02-SetupSSH.png" alt="VM Creation Screen #3" />
<p class="caption">VM Creation Screen #3</p>
</div>
<p>Click “OK”.</p>
<p>Now it is up to you to choose the size of the VM you would like to use. It will depend on the size of datasets you will be analyzing and what type of analysis you would like to perform on said datasets. It is usually in your best interests to have your dataset fit in main memory so you don’t have to worry about paging. Here is a good rule of thumb for estimating the size of your dataset in memory:</p>
<pre><code>memory required = no. of column * no. of rows * 8 bytes/numeric</code></pre>
<p>For example, if I had a dataset of with 4,000,000 rows and 130 columns, I would need approximately:</p>
<pre><code>4,000,000 * 130 * 8 
= 4,160,000,000 / 1073741824 
~ 3.87 GB</code></pre>
<p>You would need approximately 3.87 GB of memory to store this dataset in memory. Note that this estimation assumes that all the columns in the dataset are numeric. You will want to create a VM that has at least as much memory as the estimated size of the dataset you are analyzing. You also have to take into account the additional memory that the operating system and R Studio Server requires in order to run. Doubling the amount of memory should be more than sufficient.</p>
<p>Depending on the type of analysis you are performing, you may need a significant more amount of memory. However, one of the beauties of using the Microsoft Azure platform is that you can easily scale your VM’s capabilities to fit your needs :)</p>
<p>For this tutorial, we will be selecting DS11 Standard size, which includes 2 cores and 14 GB of memory.</p>
<div class="figure">
<img src="/images/2016-04-02-SelectVMSize.png" alt="VM Creation Screen #4" />
<p class="caption">VM Creation Screen #4</p>
</div>
<p>Select the DS11 machine size and click the “Select” button.</p>
<p>In the Settings section, we will just accept the defaults. Once on the summary page, click “OK” to begin the procurement of the VM.</p>
<p>When the deployment of the VM has finished, we will now need to allow traffic on port 8787 through to the VM. First, click on the “Virtual machines” link in the sidebar. Click on the “RServer” virtual machine. Now click on the “Settings” button. This will open the “Settings” blade. Within the settings blade, click the “Network interfaces” link.</p>
<div class="figure">
<img src="/images/2016-04-02-SetupNetwork.png" alt="VM Creation Screen #5" />
<p class="caption">VM Creation Screen #5</p>
</div>
<p>Now click on the “Network security group” link. Click on the only security group in the resulting page. From here, we can make a new “Inbound security rule”.</p>
<div class="figure">
<img src="/images/2016-04-02-NetworkSecurity.png" alt="VM Creation Screen #6" />
<p class="caption">VM Creation Screen #6</p>
</div>
<p>Click the “Add” button to add a new “Inbound Security rule”.</p>
<div class="figure">
<img src="/images/2016-04-02-FirewallRule.png" alt="VM Creation Screen #7" />
<p class="caption">VM Creation Screen #7</p>
</div>
<p>We will first need to provide a name for this security rule. Call it “RStudio”. We can leave the “Priority” field alone. Change the “Destination port range” to 8787. This is the default port that R Studio server runs on.</p>
<div class="figure">
<img src="/images/2016-04-02-AddPortException.png" alt="VM Creation Screen #8" />
<p class="caption">VM Creation Screen #8</p>
</div>
<p>Click “OK” to continue.</p>
<h2 id="install-r">Install R</h2>
<p>We will now begin installing R and R Studio Server on the VM. Begin by logging into the VM via SSH. You can find the public IP of the VM in the dashboard:</p>
<div class="figure">
<img src="/images/2016-04-02-IPAddress.png" alt="VM Information" />
<p class="caption">VM Information</p>
</div>
<p>If you are using Windows, you can use <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">PuTTY</a> to SSH into the VM. For Mac OS X or Linux, you can use one of the built in terminal emulators.</p>
<p>In your command-line terminal, SSH into the VM:</p>
<pre><code>ssh rstudioserver@&lt;&lt;YOUR VM IP ADDRESS&gt;&gt;</code></pre>
<p>Once logged in, we will first install R. There are a few different options for installing R. We can use the version that is found in the default Ubuntu repositories. However, these normally contain an out-of-date version of R. We will opt into using the latest version of R.</p>
<p>The following command will add the repository that will contain the latest version of R:</p>
<pre><code>$ sudo sh -c &#39;echo &quot;deb http://cran.rstudio.com/bin/linux/ubuntu trusty/&quot; &gt;&gt;
/etc/apt/sources.list&#39;</code></pre>
<p>The following 2 commands are optional, but they will remove annoying warning messages you will receive from the package manager after adding the previous repository. The first command will download the associated GPG key.</p>
<pre><code>$ gpg --keyserver keyserver.ubuntu.com --recv-key E084DAB9</code></pre>
<p>The second command will add the key to the apt sources keyring:</p>
<pre><code>$ gpg -a --export E084DAB9 | sudo apt-key add -</code></pre>
<p>Next we will need to refresh the package lists using the following command:</p>
<pre><code>$ sudo apt-get update</code></pre>
<p>We can now install the latest version of R:</p>
<pre><code>$ sudo apt-get install r-base</code></pre>
<h2 id="install-r-studio-server">Install R Studio Server</h2>
<p>We can begin installing R Studio Server. We will first need to install a package called ‘gdebi’. This package allows us to install DEB files and to automatically resolve and dependencies for said DEB files. To install ‘gdebi’, enter the following command:</p>
<pre><code>$ sudo apt-get install gdebi-core</code></pre>
<p>Now, download the DEB file for R Studio Server:</p>
<pre><code>$ wget https://download2.rstudio.org/rstudio-server-0.99.893-amd64.deb  </code></pre>
<p>To install the DEB file, enter the following command:</p>
<pre><code>$ sudo gdebi rstudio-server-0.99.893-amd64.deb</code></pre>
<p>R Studio Server should now be successfully installed! We can now verify the installation using this command:</p>
<pre><code>$ sudo rstudio-server verify-installation</code></pre>
<p>If everything went well, you shouldn’t see any scary error messages.</p>
<p>Finally, we will create a new user account in order to access R Studio Server. In the command line, enter the following command:</p>
<pre><code>$ sudo adduser rstudio</code></pre>
<p>Enter a password and optionally fill out the rest of the information that you have been prompted for.</p>
<h2 id="accessing-r-studio-server">Accessing R Studio Server</h2>
<p>We can now access the server! In your web browser, enter:</p>
<pre><code>http://yourVMipaddress:8787</code></pre>
<p>You should hopefully see an R Studio login page:</p>
<div class="figure">
<img src="/images/2016-04-02-RLoginPage.png" alt="R Server Login Page" />
<p class="caption">R Server Login Page</p>
</div>
<p>Enter the credentials of the user you recently created. You will be redirected to your new R Studio workspace that you can access anywhere! Enjoy!</p>
<div class="figure">
<img src="/images/2016-04-02-RSplashPage.png" alt="R Workspace" />
<p class="caption">R Workspace</p>
</div>
<p>Cheers,</p>
<p>Connor Moreside</p>
<h2 id="resources">Resources</h2>
<ol style="list-style-type: decimal">
<li><a href="https://support.rstudio.com/hc/en-us/articles/200552316-Configuring-the-Server">Configuring R Server</a></li>
<li><a href="https://azure.microsoft.com/en-us/pricing/calculator/">Azure Pricing Calculator</a></li>
</ol>]]></description>
    <pubDate>Sat, 02 Apr 2016 00:00:00 UT</pubDate>
    <guid>http://moresi.de/posts/2016-04-02-setting-up-r-studio-server-on-microsoft-azure.html</guid>
    <dc:creator>Connor Moreside</dc:creator>
</item>
<item>
    <title>Domain Ownership Validation</title>
    <link>http://moresi.de/posts/2014-09-04-domain-ownership-validation.html</link>
    <description><![CDATA[<p>At my current position, I was tasked with creating a component which would determine whether or not an individual owned or at the very least had administrative rights to a domain name; that is, to perform domain ownership validation. Why would one want to perform domain ownership validation? If one was providing a service which would send emails on behalf of a company with the domain name in question, for example, you would want to verify that whomever had signed up for the service with the domain name actually had the authority to do so.</p>
<p>At first glance, the most simple way would be to send an email to the individual who is listed as the administrator contact in the WHOIS database. However, there are a few different issues which become glaringly apparent once you perform a couple WHOIS lookups on a few different domains.</p>
<p>Many individuals opt for WHOIS Privacy Protection which is a service that many domain name registers provide that generally replaces all the publicly visible contact details with alternate contact information so that when a WHOIS query is performed on the domain, an alternate mailing address, email address and phone number are displayed. The alternative email address should forward any messages to the actual email address the registerer used. However, in my experience, this has been spotty at best. To complicate things further, some domain authorities no longer post registration details of individuals associated with particular domains, such as .ca domains.</p>
<p>So… scratch the WHOIS lookup method…</p>
<p>Another approach one could take is to have the individual upload a HTML document containing a unique token associated with the individual’s domain to his/her web server. After the document is uploaded, our system could then check to see if that document exists and whether or not the token inside the document matches the one in our system. Great! This sounds easy enough to do. One problem though: what if the user does not have a web server associated with that domain? Crap… moving on…</p>
<p>I weighed the pros and cons of a couple other methods, but I finally settled on a method which involved an individual adding a TXT DNS record to his/her domain name server. Here is a brief overview of the approach:</p>
<ol style="list-style-type: decimal">
<li>When an individual asks to register a domain on our system, we will generate a unique token that is associated with the domain name registration request. We then need to store this validation token somewhere for future use (probably in a database).<br />
</li>
<li>The individual must place this unique token in a TXT record that is associated with this domain.<br />
</li>
<li>Once the TXT record has been created, the user will be able to click a ‘Verify Domain’ button in our system.<br />
</li>
<li>Our system will then proceed to retrieve all TXT records associated with the domain. The system will then try to find the record that the customer inserted.<br />
</li>
<li>If the record is found and the validation token matches the one we have in our system, the domain is verified!</li>
</ol>
<p>This approach works rather nicely; however, it is a little technical for the average user. Most people wouldn’t know how to add a DNS record (let alone even know what a DNS record is!) to their domain name server. One could help mitigate this complexity by preparing an email template containing the relevant information that a user could copy/paste into an email and send to their DNS provider.</p>
<p>Here is some sample code for generating a unique validation token:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs"><span class="kw">public</span> <span class="kw">class</span> DomainValidationTokenUtil {
    <span class="kw">public</span> <span class="kw">static</span> <span class="kw">readonly</span> <span class="dt">int</span> TOKEN_LENGTH = <span class="dv">50</span>;        
 
    <span class="kw">public</span> <span class="kw">static</span> <span class="dt">string</span> <span class="fu">GenerateToken</span>()
    {
        <span class="dt">char</span>[] universeOfDiscourse = <span class="st">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&quot;</span>.<span class="fu">ToCharArray</span>();
            
        RNGCryptoServiceProvider crypto = <span class="kw">new</span> <span class="fu">RNGCryptoServiceProvider</span>();
        <span class="dt">byte</span>[] data = <span class="kw">new</span> <span class="dt">byte</span>[TOKEN_LENGTH];
        crypto.<span class="fu">GetNonZeroBytes</span>(data);
 
        StringBuilder result = <span class="kw">new</span> <span class="fu">StringBuilder</span>(TOKEN_LENGTH);
        <span class="kw">foreach</span> (<span class="dt">byte</span> b <span class="kw">in</span> data)
        {
            result.<span class="fu">Append</span>(universeOfDiscourse[b % (universeOfDiscourse.<span class="fu">Length</span> - <span class="dv">1</span>)]);
        }
            
        <span class="kw">return</span> result.<span class="fu">ToString</span>();
    }
}</code></pre></div>
<p>As far as I know, the .NET framework does not have a built-in mechanism for nicely retrieving DNS records, so instead of writing our own, let us use a 3rd party library such as <a href="http://arsofttoolsnet.codeplex.com/">ARSoft.Tools.NET</a> or one found on <a href="http://www.codeproject.com/Articles/23673/DNS-NET-Resolver-C">CodeProject</a>. Personally, I used the library on CodeProject. Here is some sample code for retrieving the DNS records, parsing the records, and performing the validation:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs"><span class="kw">public</span> <span class="kw">interface</span> IDNSProvider {
    IList&lt;<span class="dt">string</span>&gt; <span class="fu">GetTXTRecords</span>(<span class="dt">string</span> domainName);
}</code></pre></div>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs"><span class="kw">using</span> Heijden.<span class="fu">DNS</span>;
 
<span class="kw">public</span> <span class="kw">class</span> DNSProvider : IDNSProvider
{
    <span class="kw">private</span> <span class="kw">readonly</span> Resolver _resolver;
 
    <span class="kw">public</span> <span class="fu">DNSProvider</span>()
    {
        _resolver = <span class="kw">new</span> <span class="fu">Resolver</span>();
        _resolver.<span class="fu">Recursion</span> = <span class="kw">true</span>;
        _resolver.<span class="fu">UseCache</span> = <span class="kw">true</span>;
        _resolver.<span class="fu">DnsServer</span> = <span class="st">&quot;8.8.8.8&quot;</span>; <span class="co">// Google Public DNS</span>
 
        _resolver.<span class="fu">TimeOut</span> = <span class="dv">1000</span>;
        _resolver.<span class="fu">Retries</span> = <span class="dv">3</span>;
        _resolver.<span class="fu">TransportType</span> = TransportType.<span class="fu">Udp</span>;
    }
 
    <span class="kw">public</span> IList&lt;<span class="dt">string</span>&gt; <span class="fu">GetTXTRecords</span>(<span class="dt">string</span> domainName)
    {
        IList&lt;<span class="dt">string</span>&gt; records = <span class="kw">new</span> List&lt;<span class="dt">string</span>&gt;();
        <span class="dt">const</span> QType qType = QType.<span class="fu">TXT</span>;
        <span class="dt">const</span> QClass qClass = QClass.<span class="fu">IN</span>;
 
        Response response = _resolver.<span class="fu">Query</span>(domainName, qType, qClass);
 
        <span class="kw">foreach</span> (RecordTXT record <span class="kw">in</span> response.<span class="fu">RecordsTXT</span>)
        {
            records.<span class="fu">Add</span>(record.<span class="fu">ToString</span>());
        }
 
        <span class="kw">return</span> records;
    }
}</code></pre></div>
<p>And here is how you could perform the validation:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs"><span class="kw">public</span> <span class="kw">class</span> DomainValidationService
{
    <span class="kw">private</span> IDNSProvider _dnsProvider;
 
    <span class="kw">public</span> <span class="fu">DomainValidationService</span>(IDNSProvider dnsProvider)
    {
        _dnsProvider = dnsProvider;
    }
 
    <span class="kw">public</span> <span class="dt">bool</span> <span class="fu">ValidateDomainOwnership</span>(<span class="dt">string</span> domainName, <span class="dt">string</span> validationToken)
    {
        <span class="co">// Retrieve TXT records</span>
        IList&lt;<span class="dt">string</span>&gt; txtRecords = _dnsProvider.<span class="fu">GetTXTRecords</span>(domainName);
 
        <span class="co">// If there are no TXT records, the site is not verified yet.</span>
        <span class="kw">if</span> (txtRecords.<span class="fu">Count</span> == <span class="dv">0</span>)
            <span class="kw">return</span> <span class="kw">false</span>;
 
        <span class="co">// Check to see if validation token exists in any of the TXT records found</span>
        <span class="co">// and return the validation token if found.</span>
        <span class="dt">string</span> validationTokenInTXTRecord = <span class="fu">FindValidationTokenInTXTRecords</span>(txtRecords, validationToken);
 
        <span class="co">// No TXT record found containing a validation token.</span>
        <span class="kw">if</span> (validationTokenInTXTRecord == <span class="kw">null</span>)
            <span class="kw">return</span> <span class="kw">false</span>;
 
        <span class="kw">if</span> (validationTokenInTXTRecord.<span class="fu">Length</span> != <span class="dv">50</span>)
            <span class="kw">throw</span> <span class="kw">new</span> <span class="fu">Exception</span>(<span class="st">&quot;Invalid validation token in TXT record.&quot;</span>);
 
        <span class="kw">if</span> (!validationTokenInTXTRecord.<span class="fu">Equals</span>(validationToken))
            <span class="kw">throw</span> <span class="kw">new</span> <span class="fu">Exception</span>(<span class="st">&quot;Validation token in database does not match token in TXT record.&quot;</span>);
 
        <span class="co">// Everything must be OK, domain has been validated!</span>
        <span class="kw">return</span> <span class="kw">true</span>;
    }
 
    <span class="kw">public</span> <span class="dt">string</span> <span class="fu">GenerateTXTRecordValue</span>()
    {
        <span class="kw">return</span> <span class="dt">string</span>.<span class="fu">Format</span>(<span class="st">&quot;domain-verification={0}&quot;</span>, DomainVerificationTokenUtil.<span class="fu">GenerateToken</span>());
    }
 
    <span class="kw">private</span> <span class="dt">string</span> <span class="fu">FindValidationTokenInTXTRecords</span>(IList&lt;<span class="dt">string</span>&gt; txtRecords, <span class="dt">string</span> validationToken)
    {
        <span class="dt">string</span> txtValidationToken = <span class="kw">null</span>;
 
        <span class="kw">foreach</span> (<span class="dt">string</span> txtRecord <span class="kw">in</span> txtRecords)
        {
            <span class="kw">if</span> (txtRecord.<span class="fu">StartsWith</span>(<span class="st">&quot;domain-verification&quot;</span>))
                <span class="kw">return</span> txtRecord.<span class="fu">Split</span>(&#39;=&#39;)[<span class="dv">1</span>];
        }
 
        <span class="kw">return</span> txtValidationToken;
    }
}</code></pre></div>
<p>Thanks for reading and hopefully this will be helpful if you need to do any sort of domain ownership validation on your systems!</p>
<p>Cheers,</p>
<p>Connor Moreside</p>]]></description>
    <pubDate>Thu, 04 Sep 2014 00:00:00 UT</pubDate>
    <guid>http://moresi.de/posts/2014-09-04-domain-ownership-validation.html</guid>
    <dc:creator>Connor Moreside</dc:creator>
</item>

    </channel>
</rss>
